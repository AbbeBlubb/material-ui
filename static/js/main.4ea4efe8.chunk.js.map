{"version":3,"sources":["hooks/useInput.js","components/UserForm.js","App.js","serviceWorker.js","index.js"],"names":["useInput","initialValue","useState","value","setValue","onChange","e","target","useStyles","makeStyles","paper","background","marginTop","display","flexDirection","alignItems","padding","borderRadius","avatar","margin","form","submitButton","UserForm","classes","firstName","bindFirstName","resetFirstName","lastName","bindLastName","resetLastName","React","checked","setChecked","Container","component","maxWidth","className","Avatar","Typography","variant","TextField","label","fullWidth","FormControlLabel","control","Checkbox","name","color","onClick","Button","preventDefault","alert","App","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iNAoBeA,MAlBf,SAAkBC,GAAe,IAAD,EAEJC,mBAASD,GAFL,mBAEvBE,EAFuB,KAEhBC,EAFgB,KAe9B,MAAO,CAACD,EAPK,CACXA,QACAE,SAAU,SAAAC,GACRF,EAASE,EAAEC,OAAOJ,SAPR,WACZC,EAAS,O,sFCKPI,EAAYC,YAAW,CAC3BC,MAAO,CACLC,WAAY,mDACZC,UAAW,QACXC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,QAAS,OACTC,aAAc,QAEhBC,OAAQ,CACNP,WACE,uEACFQ,OAAQ,QAEVC,KAAM,CACJD,OAAQ,QAEVE,aAAc,CACZT,UAAW,UA6FAU,MAzFf,WACE,IAAMC,EAAUf,IADE,EAIiCR,EAAS,IAJ1C,mBAIXwB,EAJW,KAIAC,EAJA,KAIeC,EAJf,OAK8B1B,EAAS,IALvC,mBAKX2B,EALW,KAKDC,EALC,KAKaC,EALb,OAMYC,IAAM5B,UAAS,GAN3B,mBAMX6B,EANW,KAMFC,EANE,KAsBlB,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAAKC,UAAWb,EAAQb,OAC3D,kBAAC2B,EAAA,EAAD,CAAQD,UAAWb,EAAQL,QACzB,kBAAC,IAAD,OAGF,kBAACoB,EAAA,EAAD,CAAYJ,UAAU,KAAKK,QAAQ,MAAnC,iBAIA,0BAAMH,UAAWb,EAAQH,MACvB,6BACE,kBAACoB,EAAA,EAAD,eACEC,MAAM,aACNF,QAAQ,SACRpB,OAAO,SACPuB,WAAS,GACLjB,KAWR,6BACE,kBAACe,EAAA,EAAD,eACEC,MAAM,YACNF,QAAQ,SACRpB,OAAO,SACPuB,WAAS,GACLd,IAGN,kBAACe,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CACEd,QAASA,EACTe,KAAK,aACL3C,MAAM,mHACN4C,MAAM,UACNC,QAAS,SAAC1C,GACR0B,GAAYD,MAIlBU,MAAM,8CAGR,kBAACQ,EAAA,EAAD,CACEb,UAAWb,EAAQF,aACnBkB,QAAQ,YACRQ,MAAM,UACNL,WAAS,EACTM,QAvEY,SAAC1C,GACrBA,EAAE4C,iBAEGnB,GAKLoB,MAAM,SAAD,OAAU3B,EAAV,YAAuBG,IAC5BD,IACAG,IACAG,GAAW,IAPTmB,MAAM,+BA8DF,cC/FKC,MAVf,WACE,OACE,oCACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,SCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4ea4efe8.chunk.js","sourcesContent":["import {useState} from 'react'\r\n\r\nfunction useInput(initialValue) {\r\n\r\n  const [value, setValue] = useState(initialValue)\r\n\r\n  const reset = () => {\r\n    setValue('')\r\n  }\r\n\r\n  const bind = {\r\n    value,\r\n    onChange: e => {\r\n      setValue(e.target.value)\r\n    }\r\n  }\r\n  \r\n  return [value, bind, reset]\r\n}\r\n\r\nexport default useInput\r\n","import React from \"react\";\r\nimport useInput from \"../hooks/useInput\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport ChatBubbleOutlineIcon from \"@material-ui/icons/ChatBubbleOutline\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles({\r\n  paper: {\r\n    background: \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\",\r\n    marginTop: \"100px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    padding: \"50px\",\r\n    borderRadius: \"10px\",\r\n  },\r\n  avatar: {\r\n    background:\r\n      \"linear-gradient(45deg, rgb(33, 150, 243) 30%, rgb(33, 203, 243) 90%)\",\r\n    margin: \"10px\",\r\n  },\r\n  form: {\r\n    margin: \"20px\",\r\n  },\r\n  submitButton: {\r\n    marginTop: \"20px\",\r\n  },\r\n});\r\n\r\nfunction UserForm() {\r\n  const classes = useStyles();\r\n\r\n  // Destructure the array returned from the custom hook\r\n  const [firstName, bindFirstName, resetFirstName] = useInput(\"\");\r\n  const [lastName, bindLastName, resetLastName] = useInput(\"\");\r\n  const [checked, setChecked] = React.useState(false);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!checked) {\r\n      alert(\"First check the checkbox!\");\r\n      return;\r\n    }\r\n\r\n    alert(`Hello ${firstName} ${lastName}`);\r\n    resetFirstName();\r\n    resetLastName();\r\n    setChecked(false)\r\n  };\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\" className={classes.paper}>\r\n      <Avatar className={classes.avatar}>\r\n        <ChatBubbleOutlineIcon />\r\n      </Avatar>\r\n\r\n      <Typography component=\"h1\" variant=\"h5\">\r\n        Fire an alert\r\n      </Typography>\r\n\r\n      <form className={classes.form}>\r\n        <div>\r\n          <TextField\r\n            label=\"First Name\"\r\n            variant=\"filled\"\r\n            margin=\"normal\"\r\n            fullWidth\r\n            {...bindFirstName}\r\n          />\r\n\r\n          {/*\r\n          <input \r\n            type='text'\r\n            value={firstName}\r\n            onChange={() => setFirstName(e.target.value)}\r\n          */}\r\n        </div>\r\n\r\n        <div>\r\n          <TextField\r\n            label=\"Last name\"\r\n            variant=\"filled\"\r\n            margin=\"normal\"\r\n            fullWidth\r\n            {...bindLastName}\r\n          />\r\n\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                checked={checked}\r\n                name=\"understood\"\r\n                value=\"The string to use as the value of the checkbox when submitting the form, if the checkbox is currently toggled on\"\r\n                color=\"primary\"\r\n                onClick={(e) => {\r\n                  setChecked(!checked);\r\n                }}\r\n              />\r\n            }\r\n            label=\"I understand that I will trigger an alert\"\r\n          />\r\n\r\n          <Button\r\n            className={classes.submitButton}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            fullWidth\r\n            onClick={submitHandler}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default UserForm;\r\n","import React from \"react\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport UserForm from \"./components/UserForm\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <CssBaseline>\r\n        <UserForm />\r\n      </CssBaseline>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}